import os
import datetime
import IPython
import IPython.display
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf
from tensorflow import keras

mpl.rcParams['figure.figsize'] = (8, 6)
mpl.rcParams['axes.grid'] = False

from sklearn import preprocessing
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_absolute_percentage_error
from sklearn.metrics import mean_squared_error

import time
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from sklearn.ensemble import RandomForestRegressor

from pprint import pprint

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Haywood_County_NC.csv', parse_dates = True)
df

#Evolution of some features overtime
plot_cols = ['GWL1t', 'precip', 'Tair', 'Et']
plot_features = df[plot_cols]
date_time = pd.to_datetime(df['Date'])
plot_features.index = date_time
_ = plot_features.plot(subplots = True)

#Clean up data:
#1: Drop rows with none type
#2: Drop the last row because of extreme air temperature

df.isnull().sum()

#Removes rows with none type and the last row
df = df.dropna(axis = 0, how = 'any')
df

cols = [col for col in df.columns if col != 'Date']
date_time = pd.to_datetime(df['Date'])
features = df[cols].set_index(date_time)
plot = features.plot(figsize = (12, 24), subplots = True)

df.describe().transpose()

string_date_column = df['Date']

df['Date'] = pd.to_datetime(string_date_column).dt.date
df.set_index('Date', inplace=True)
df.sort_index(inplace=True)
df

df_backup = df.copy()

#Train Test & Validation Split + Min-Max Scaling
column_indices = {name: i for i, name in enumerate(df.columns)}

#Training dataset: 2000-2015
train_df = df[:5823]

print("Training Size: ", round(len(train_df)/len(df) * 100, 3), "%", sep="")

#Validation dataset: 2016-2017
val_df = df[5823:6552]

print("Validation Size: ", round(len(val_df)/len(df) * 100, 3), "%", sep="")

#Testing dataset: 2018-2019
test_df = df[6552:]

print("Testing Size: ", round(len(test_df)/len(df) * 100, 3), "%", sep="")

minmax_scaler = preprocessing.MinMaxScaler()
scaled_train_matrix = minmax_scaler.fit_transform(train_df)
scaled_val_matrix = minmax_scaler.transform(val_df)
scaled_test_matrix = minmax_scaler.transform(test_df)

feature_col_names_dict = dict(enumerate(df.columns))
train_dict = {}
test_dict = {}
val_dict = {}

for i in range(len(scaled_train_matrix[0])):
  scaled_feature_data = scaled_train_matrix[:, i]
  feature_col_name = feature_col_names_dict.get(i)
  train_dict[feature_col_name] = scaled_feature_data

scaled_train_df = pd.DataFrame(train_dict)

for i in range(len(scaled_test_matrix[0])):
  scaled_feature_data = scaled_test_matrix[:, i]
  feature_col_name = feature_col_names_dict.get(i)
  test_dict[feature_col_name] = scaled_feature_data

scaled_test_df = pd.DataFrame(test_dict)

for i in range(len(scaled_val_matrix[0])):
  scaled_feature_data = scaled_val_matrix[:, i]
  feature_col_name = feature_col_names_dict.get(i)
  val_dict[feature_col_name] = scaled_feature_data

scaled_val_df = pd.DataFrame(val_dict)

#Data windowing
class WindowGenerator():
  def __init__(self, input_width, label_width, shift,
               train_df=train_df, val_df=val_df, test_df=test_df,
               label_columns=None):
    # Store the raw data.
    self.train_df = train_df
    self.val_df = val_df
    self.test_df = test_df

    # Work out the label column indices.
    self.label_columns = label_columns
    if label_columns is not None:
      self.label_columns_indices = {name: i for i, name in
                                    enumerate(label_columns)}
    self.column_indices = {name: i for i, name in
                           enumerate(train_df.columns)}

    # Work out the window parameters.
    self.input_width = input_width
    self.label_width = label_width
    self.shift = shift

    self.total_window_size = input_width + shift

    self.input_slice = slice(0, input_width)
    self.input_indices = np.arange(self.total_window_size)[self.input_slice]

    self.label_start = self.total_window_size - self.label_width
    self.labels_slice = slice(self.label_start, None)
    self.label_indices = np.arange(self.total_window_size)[self.labels_slice]

  def __repr__(self):
    return '\n'.join([
        f'Total window size: {self.total_window_size}',
        f'Input indices: {self.input_indices}',
        f'Label indices: {self.label_indices}',
        f'Label column name(s): {self.label_columns}'])

  def split_window(self, features):
    inputs = features[:, self.input_slice, :]
    labels = features[:, self.labels_slice, :]
    if self.label_columns is not None:
      labels = tf.stack(
        [labels[:, :, self.column_indices[name]] for name in self.label_columns],
        axis=-1)

    # Slicing doesn't preserve static shape information, so set the shapes
    # manually. This way the `tf.data.Datasets` are easier to inspect.
    inputs.set_shape([None, self.input_width, None])
    labels.set_shape([None, self.label_width, None])

    return inputs, labels

  def plot(self, model=None, plot_col='GWL1t', max_subplots=1):
    inputs, labels = self.example
    plt.figure(figsize=(12, 8))
    plot_col_index = self.column_indices[plot_col]
    max_n = min(max_subplots, len(inputs))

    for n in range(max_n):
      plt.subplot(max_n, 1, n+1)
      plt.ylabel(f'{plot_col}')
      #plt.plot(self.input_indices, inputs[n, :, plot_col_index],
       #        label='Inputs', marker='.', c = '#0000ff')

      gwl_indices = self.column_indices['GWL1t']
      i = inputs[n, :, gwl_indices]
      a = tf.expand_dims(i, axis = 1)
      b = tf.repeat(a, repeats = 11, axis = 1)
      c = minmax_scaler.inverse_transform(b)
      unscaled_inputs = c[:, 0]

      plt.plot(self.input_indices, unscaled_inputs,
               label = 'Actual', marker = '.', c='#0000ff')

      if self.label_columns:
        label_col_index = self.label_columns_indices.get(plot_col, None)
      else:
        label_col_index = plot_col_index

      if label_col_index is None:
        continue

      #plt.scatter(self.label_indices, labels[n, :, label_col_index],
                  #edgecolors='k', label='Labels', c='#2ca02c', s=64)

      if model is not None:
        predictions = model(inputs)

      gwl_indices = self.column_indices['GWL1t']
      p = predictions[n, :, gwl_indices]
      a = tf.expand_dims(p, axis = 1)
      b = tf.repeat(a, repeats = 11, axis = 1)
      c = minmax_scaler.inverse_transform(b)
      unscaled_predictions = c[:, 0]
      plt.plot(self.label_indices, unscaled_predictions,
               label='Predictions', marker = '.', c = '#ff0000')

      if n == 0:
        plt.legend()

    plt.xlabel('Time [d]')

    def get_unscaled_prediction_batches(self, model):
      inputs, labels = self.example
      max_n = len(inputs)
      unscaled_predictions = []

      for n in range(max_n):
        predictions = model(inputs)
        gwl_indices = self.column['GWL1t']
        t = predictions[n, :, gwl_indices]
        a = tf.expand_dims(t, axis = 1)
        b = tf.repeat(a, repeats = 11, axis = 1)
        c = minmax_scaler.inverse_transform(b)
        d = c[:, 0]
        unscaled_predictions.append(d)

      return unscaled_predictions

  def make_dataset(self, data):
    data = np.array(data, dtype=np.float32)
    ds = tf.keras.utils.timeseries_dataset_from_array(
        data=data,
        targets=None,
        sequence_length=self.total_window_size,
        sequence_stride=1,
        shuffle=True,
        batch_size=32,)

    ds = ds.map(self.split_window)

    return ds

  @property
  def train(self):
    return self.make_dataset(self.train_df)

  @property
  def val(self):
    return self.make_dataset(self.val_df)

  @property
  def test(self):
    return self.make_dataset(self.test_df)

  @property
  def example(self):
    """Get and cache an example batch of `inputs, labels` for plotting."""
    result = getattr(self, '_example', None)
    if result is None:
      # No example batch was found, so get one from the `.train` dataset
      result = next(iter(self.train))
      # And cache it for next time
      self._example = result
    return result

#Multi-step models
OUT_STEPS = 182
multi_window = WindowGenerator(input_width = 182,
                               label_width = OUT_STEPS,
                               shift = 1,
                               train_df = scaled_train_df,
                               val_df = scaled_val_df,
                               test_df = scaled_test_df,
                               label_columns = ['GWL1t'])

multi_window

#Baselines
class MultiStepLastBaseline(tf.keras.Model):
  def call(self, inputs):
    return tf.tile(inputs[:, -1:, :], [1, OUT_STEPS, 1])

last_baseline = MultiStepLastBaseline()
last_baseline.compile(loss = tf.keras.losses.MeanSquaredError(),
                      metrics = [tf.keras.metrics.MeanAbsoluteError(),
                                tf.keras.metrics.MeanAbsolutePercentageError()])

multi_val_performance = {}
multi_performance = {}

multi_val_performance = {}
multi_performance = {}

multi_val_performance['Last'] = last_baseline.evaluate(multi_window.val)
multi_performance['Last'] = last_baseline.evaluate(multi_window.test, verbose = 0)
multi_window.plot(last_baseline)

#Repeat Basline makes predictions base on the previous day
class RepeatBaseline(tf.keras.Model):
  def call(self, inputs):
    return inputs

repeat_baseline = RepeatBaseline()
repeat_baseline.compile(loss = tf.keras.losses.MeanSquaredError(),
                        metrics = [tf.keras.metrics.MeanAbsoluteError(),
                                   tf.keras.metrics.MeanAbsolutePercentageError()])

multi_val_performance['Repeat'] = repeat_baseline.evaluate(multi_window.val)
multi_performance['Repeat'] = repeat_baseline.evaluate(multi_window.test, verbose = 0)
multi_window.plot(repeat_baseline)

MAX_EPOCHS = 20
def compile_and_fit(model, window, patience = 2):
  early_stopping = tf.keras.callbacks.EarlyStopping(monitor = 'val_loss',
                                                  patience=patience,
                                                    mode = 'min')

  model.compile(loss = tf.keras.losses.MeanSquaredError(),
                optimizer = tf.keras.optimizers.Adam(),
                metrics = [tf.keras.metrics.MeanAbsoluteError(),
                           tf.keras.metrics.MeanAbsolutePercentageError(),
                           tf.keras.metrics.MeanSquaredError()])

  history = model.fit(window.train, epochs=MAX_EPOCHS,
                      validation_data = window.val,
                      callbacks = [early_stopping])

  return history

#Single Shot model
#Linear
multi_linear_model = tf.keras.Sequential([
    #Take the last time-step.
    #Shape [batch, time, features] => [batch, 1, features]
    tf.keras.layers.Lambda(lambda x: x[:, -1:, :]),
    #Shape => [batch, 1, out_steps*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),


    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_linear_model, multi_window)

IPython.display.clear_output()
multi_val_performance['Linear'] = multi_linear_model.evaluate(multi_window.val)
multi_performance['Linear'] = multi_linear_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_linear_model)

print(multi_linear_model.summary())

#Dense
#Gives the linear model more power; based on single input time step
multi_dense_model = tf.keras. Sequential([
    #Take the last time step.
    #Shape [batch, time, features] => [batch, 1, features]
    tf.keras.layers.Lambda(lambda x: x[:, -1:, :]),
    #Shape => [batch, 1, dense_units]
    tf.keras.layers.Dense(512, activation = 'relu'),
    #Shape => [batch, out_steps*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),

    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_dense_model, multi_window)

IPython.display.clear_output()
multi_val_performance['Dense'] = multi_dense_model.evaluate(multi_window.val)
multi_performance['Dense'] = multi_dense_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_dense_model)

print(multi_dense_model.summary())

#CNN
CONV_WIDTH = 182
multi_conv_model = tf.keras.Sequential([
    #Shape [batch, time, features] => [batch, CONV_WIDTH, features]
    tf.keras.layers.Lambda(lambda x: x[:, -CONV_WIDTH:, :]),
    #Shape => [batch, 1, conv_units]
    tf.keras.layers.Conv1D(256, activation = 'relu', kernel_size = (CONV_WIDTH)),
    #Shape => [batch, 1, out_step*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),

    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_conv_model, multi_window)

IPython.display.clear_output()

multi_val_performance['Conv'] = multi_conv_model.evaluate(multi_window.val)
multi_performance['Conv'] = multi_conv_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_conv_model)

#CNN
CONV_WIDTH = 1
multi_conv_model = tf.keras.Sequential([
    #Shape [batch, time, features] => [batch, CONV_WIDTH, features]
    tf.keras.layers.Lambda(lambda x: x[:, -CONV_WIDTH:, :]),
    #Shape => [batch, 1, conv_units]
    tf.keras.layers.Conv1D(256, activation = 'relu', kernel_size = (CONV_WIDTH)),
    #Shape => [batch, 1, out_step*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),

    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_conv_model, multi_window)

IPython.display.clear_output()

multi_val_performance['Conv'] = multi_conv_model.evaluate(multi_window.val)
multi_performance['Conv'] = multi_conv_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_conv_model)

print(multi_conv_model.summary())

#RNN
multi_lstm_model = tf.keras.Sequential([
    #Shape [batch, time, features] => [batch, lstm_units].
    #Adding more `lstm_units` just overfits more quickly.
    tf.keras.layers.LSTM(32, return_sequences = False),
    #Shape => [batch, out_steps*features].
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),
    #Shape => [batch, out_steps, features].
    tf.keras.layers.Reshape([OUT_STEPS, 13])])

history = compile_and_fit(multi_lstm_model, multi_window)

IPython.display.clear_output()

multi_val_performance['LSTM'] = multi_lstm_model.evaluate(multi_window.val)
multi_performance['LSTM'] = multi_lstm_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_lstm_model)

print(multi_lstm_model.summary())

x = np.arange(len(multi_performance))
width = 0.3

metric_name = 'mean_absolute_error'
metric_index = multi_lstm_model.metrics_names.index('mean_absolute_error')
val_mae = [v[metric_index] for v in multi_val_performance.values()]
test_mae = [v[metric_index] for v in multi_performance.values()]

plt.bar(x - 0.17, val_mae, width, label='Validation')
plt.bar(x + 0.17, test_mae, width, label='Test')
plt.xticks(ticks=x, labels=multi_performance.keys(),
           rotation=45)
plt.ylabel(f'mean_absolute_error [GWL1t minmax scaled]')
_ = plt.legend()

x = np.arange(len(multi_performance))
width = 0.3

x = np.arange(len(multi_performance))
width = 0.3

metric_name = 'mean_absolute_percentage_error'
metric_index = multi_lstm_model.metrics_names.index('mean_absolute_percentage_error')
val_mae = [v[metric_index] for v in multi_val_performance.values()]
test_mae = [v[metric_index] for v in multi_performance.values()]

plt.bar(x - 0.17, val_mae, width, label='Validation')
plt.bar(x + 0.17, test_mae, width, label='Test')
plt.xticks(ticks=x, labels=multi_performance.keys(),
           rotation=45)
plt.ylabel(f'mean_absolute_percentage_error [GWL1t minmax scaled]')
_ = plt.legend()

OUT_STEPS = 30
multi_window = WindowGenerator(input_width = 30,
                               label_width = OUT_STEPS,
                               shift = 1,
                               train_df = scaled_train_df,
                               val_df = scaled_val_df,
                               test_df = scaled_test_df,
                               label_columns = ['GWL1t'])

multi_window

#Single Shot model
#Linear
multi_linear_model = tf.keras.Sequential([
    #Take the last time-step.
    #Shape [batch, time, features] => [batch, 1, features]
    tf.keras.layers.Lambda(lambda x: x[:, -1:, :]),
    #Shape => [batch, 1, out_steps*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),


    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_linear_model, multi_window)

IPython.display.clear_output()
multi_val_performance['Linear'] = multi_linear_model.evaluate(multi_window.val)
multi_performance['Linear'] = multi_linear_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_linear_model)

#Dense
#Gives the linear model more power; based on single input time step
multi_dense_model = tf.keras. Sequential([
    #Take the last time step.
    #Shape [batch, time, features] => [batch, 1, features]
    tf.keras.layers.Lambda(lambda x: x[:, -1:, :]),
    #Shape => [batch, 1, dense_units]
    tf.keras.layers.Dense(512, activation = 'relu'),
    #Shape => [batch, out_steps*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),

    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_dense_model, multi_window)

IPython.display.clear_output()
multi_val_performance['Dense'] = multi_dense_model.evaluate(multi_window.val)
multi_performance['Dense'] = multi_dense_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_dense_model)

#CNN
CONV_WIDTH = 30
multi_conv_model = tf.keras.Sequential([
    #Shape [batch, time, features] => [batch, CONV_WIDTH, features]
    tf.keras.layers.Lambda(lambda x: x[:, -CONV_WIDTH:, :]),
    #Shape => [batch, 1, conv_units]
    tf.keras.layers.Conv1D(256, activation = 'relu', kernel_size = (CONV_WIDTH)),
    #Shape => [batch, 1, out_step*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),

    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_conv_model, multi_window)

IPython.display.clear_output()

multi_val_performance['Conv'] = multi_conv_model.evaluate(multi_window.val)
multi_performance['Conv'] = multi_conv_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_conv_model)

#RNN
multi_lstm_model = tf.keras.Sequential([
    #Shape [batch, time, features] => [batch, lstm_units].
    #Adding more `lstm_units` just overfits more quickly.
    tf.keras.layers.LSTM(32, return_sequences = False),
    #Shape => [batch, out_steps*features].
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),
    #Shape => [batch, out_steps, features].
    tf.keras.layers.Reshape([OUT_STEPS, 13])])

history = compile_and_fit(multi_lstm_model, multi_window)

IPython.display.clear_output()

multi_val_performance['LSTM'] = multi_lstm_model.evaluate(multi_window.val)
multi_performance['LSTM'] = multi_lstm_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_lstm_model)

x = np.arange(len(multi_performance))
width = 0.3

metric_name = 'mean_absolute_error'
metric_index = multi_lstm_model.metrics_names.index('mean_absolute_error')
val_mae = [v[metric_index] for v in multi_val_performance.values()]
test_mae = [v[metric_index] for v in multi_performance.values()]

plt.bar(x - 0.17, val_mae, width, label='Validation')
plt.bar(x + 0.17, test_mae, width, label='Test')
plt.xticks(ticks=x, labels=multi_performance.keys(),
           rotation=45)
plt.ylabel(f'mean_absolute_error [GWL1t minmax scaled]')
_ = plt.legend()

x = np.arange(len(multi_performance))
width = 0.3

metric_name = 'mean_absolute_percentage_error'
metric_index = multi_lstm_model.metrics_names.index('mean_absolute_percentage_error')
val_mae = [v[metric_index] for v in multi_val_performance.values()]
test_mae = [v[metric_index] for v in multi_performance.values()]

plt.bar(x - 0.17, val_mae, width, label='Validation')
plt.bar(x + 0.17, test_mae, width, label='Test')
plt.xticks(ticks=x, labels=multi_performance.keys(),
           rotation=45)
plt.ylabel(f'mean_absolute_percentage_error [GWL1t minmax scaled]')
_ = plt.legend()

#Multi-step models
OUT_STEPS = 7
multi_window = WindowGenerator(input_width = 7,
                               label_width = OUT_STEPS,
                               shift = 1,
                               train_df = scaled_train_df,
                               val_df = scaled_val_df,
                               test_df = scaled_test_df,
                               label_columns = ['GWL1t'])

multi_window

#Single Shot model
#Linear
multi_linear_model = tf.keras.Sequential([
    #Take the last time-step.
    #Shape [batch, time, features] => [batch, 1, features]
    tf.keras.layers.Lambda(lambda x: x[:, -1:, :]),
    #Shape => [batch, 1, out_steps*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),


    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_linear_model, multi_window)

IPython.display.clear_output()
multi_val_performance['Linear'] = multi_linear_model.evaluate(multi_window.val)
multi_performance['Linear'] = multi_linear_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_linear_model)

#Dense
#Gives the linear model more power; based on single input time step
multi_dense_model = tf.keras. Sequential([
    #Take the last time step.
    #Shape [batch, time, features] => [batch, 1, features]
    tf.keras.layers.Lambda(lambda x: x[:, -1:, :]),
    #Shape => [batch, 1, dense_units]
    tf.keras.layers.Dense(512, activation = 'relu'),
    #Shape => [batch, out_steps*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),

    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_dense_model, multi_window)

IPython.display.clear_output()
multi_val_performance['Dense'] = multi_dense_model.evaluate(multi_window.val)
multi_performance['Dense'] = multi_dense_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_dense_model)

#CNN
CONV_WIDTH = 7
multi_conv_model = tf.keras.Sequential([
    #Shape [batch, time, features] => [batch, CONV_WIDTH, features]
    tf.keras.layers.Lambda(lambda x: x[:, -CONV_WIDTH:, :]),
    #Shape => [batch, 1, conv_units]
    tf.keras.layers.Conv1D(256, activation = 'relu', kernel_size = (CONV_WIDTH)),
    #Shape => [batch, 1, out_step*features]
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),

    #Shape => [batch, out_steps, features]
    tf.keras.layers.Reshape([OUT_STEPS, 13])

])

history = compile_and_fit(multi_conv_model, multi_window)

IPython.display.clear_output()

multi_val_performance['Conv'] = multi_conv_model.evaluate(multi_window.val)
multi_performance['Conv'] = multi_conv_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_conv_model)

#RNN
multi_lstm_model = tf.keras.Sequential([
    #Shape [batch, time, features] => [batch, lstm_units].
    #Adding more `lstm_units` just overfits more quickly.
    tf.keras.layers.LSTM(32, return_sequences = False),
    #Shape => [batch, out_steps*features].
    tf.keras.layers.Dense(OUT_STEPS*13,
                          kernel_initializer = tf.initializers.zeros()),
    #Shape => [batch, out_steps, features].
    tf.keras.layers.Reshape([OUT_STEPS, 13])])

history = compile_and_fit(multi_lstm_model, multi_window)

IPython.display.clear_output()

multi_val_performance['LSTM'] = multi_lstm_model.evaluate(multi_window.val)
multi_performance['LSTM'] = multi_lstm_model.evaluate(multi_window.test, verbose = 0)
multi_window.plot(multi_lstm_model)

x = np.arange(len(multi_performance))
width = 0.3

metric_name = 'mean_absolute_error'
metric_index = multi_lstm_model.metrics_names.index('mean_absolute_error')
val_mae = [v[metric_index] for v in multi_val_performance.values()]
test_mae = [v[metric_index] for v in multi_performance.values()]

plt.bar(x - 0.17, val_mae, width, label='Validation')
plt.bar(x + 0.17, test_mae, width, label='Test')
plt.xticks(ticks=x, labels=multi_performance.keys(),
           rotation=45)
plt.ylabel(f'mean_absolute_error [GWL1t minmax scaled]')
_ = plt.legend()

x = np.arange(len(multi_performance))
width = 0.3

metric_name = 'mean_absolute_percentage_error'
metric_index = multi_lstm_model.metrics_names.index('mean_absolute_percentage_error')
val_mae = [v[metric_index] for v in multi_val_performance.values()]
test_mae = [v[metric_index] for v in multi_performance.values()]

plt.bar(x - 0.17, val_mae, width, label='Validation')
plt.bar(x + 0.17, test_mae, width, label='Test')
plt.xticks(ticks=x, labels=multi_performance.keys(),
           rotation=45)
plt.ylabel(f'mean_absolute_percentage_error [GWL1t minmax scaled]')
_ = plt.legend()
